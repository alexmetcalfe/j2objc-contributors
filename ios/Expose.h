//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/annotations/Expose.java
//

#ifndef _ComGoogleGsonAnnotationsExpose_H_
#define _ComGoogleGsonAnnotationsExpose_H_

#include "J2ObjC_header.h"
#include "java/lang/annotation/Annotation.h"

/**
 @brief An annotation that indicates this member should be exposed for JSON serialization or deserialization.
 <p>This annotation has no effect unless you build com.google.gson.Gson with a com.google.gson.GsonBuilder and invoke com.google.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation() method.</p> <p>Here is an example of how this annotation is meant to be used: <p><pre> public class User { &#64Expose private String firstName; &#64Expose(serialize = false) private String lastName; &#64Expose (serialize = false, deserialize = false) private String emailAddress; private String password; } </pre></p> If you created Gson with <code>new Gson()</code> , the <code>toJson()</code> and <code>fromJson()</code> methods will use the <code>password</code> field along-with <code>firstName</code> , <code>lastName</code> , and <code>emailAddress</code> for serialization and deserialization. However, if you created Gson with <code>Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</code> then the <code>toJson()</code> and <code>fromJson()</code> methods of Gson will exclude the <code>password</code> field. This is because the <code>password</code> field is not marked with the <code>@@Expose</code> annotation. Gson will also exclude <code>lastName</code> and <code>emailAddress</code> from serialization since <code>serialize</code> is set to <code>false</code> . Similarly, Gson will exclude <code>emailAddress</code> from deserialization since <code>deserialize</code> is set to false. <p>Note that another way to achieve the same effect would have been to just mark the <code>password</code> field as <code>transient</code> , and Gson would have excluded it even with default settings. The <code>@@Expose</code> annotation is useful in a style of programming where you want to explicitly specify all fields that should get considered for serialization or deserialization.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@protocol ComGoogleGsonAnnotationsExpose < JavaLangAnnotationAnnotation >

@property (readonly) jboolean serialize;
@property (readonly) jboolean deserialize;

@end

@interface ComGoogleGsonAnnotationsExpose : NSObject < ComGoogleGsonAnnotationsExpose > {
 @private
  jboolean serialize_;
  jboolean deserialize_;
}

- (instancetype)initWithDeserialize:(jboolean)deserialize__ withSerialize:(jboolean)serialize__;

+ (jboolean)serializeDefault;
+ (jboolean)deserializeDefault;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonAnnotationsExpose)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonAnnotationsExpose)

#endif // _ComGoogleGsonAnnotationsExpose_H_
