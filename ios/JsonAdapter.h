//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/annotations/JsonAdapter.java
//

#ifndef _ComGoogleGsonAnnotationsJsonAdapter_H_
#define _ComGoogleGsonAnnotationsJsonAdapter_H_

#include "J2ObjC_header.h"
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/**
 @brief An annotation that indicates the Gson TypeAdapter to use with a class or field.
 <p>Here is an example of how this annotation is used:</p> <pre> &#64JsonAdapter(UserJsonAdapter.class) public class User { public final String firstName, lastName; private User(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; } } public class UserJsonAdapter extends TypeAdapter&lt;User&gt; { &#64Override public void write(JsonWriter out, User user) throws IOException { // implement write: combine firstName and lastName into name out.beginObject(); out.name("name"); out.value(user.firstName + " " + user.lastName); out.endObject(); // implement the write method } &#64Override public User read(JsonReader in) throws IOException { // implement read: split name into firstName and lastName in.beginObject(); in.nextName(); String[] nameParts = in.nextString().split(" "); in.endObject(); return new User(nameParts[0], nameParts[1]); } } </pre> Since User class specified UserJsonAdapter.class in &#64JsonAdapter annotation, it will automatically be invoked to serialize/deserialize User instances. <br> <p> Here is an example of how to apply this annotation to a field. <pre> private static final class Gadget { &#64JsonAdapter(UserJsonAdapter2.class) final User user; Gadget(User user) { this.user = user; } } </pre> It's possible to specify different type adapters on a field, that field's type, and in the com.google.gson.GsonBuilder . Field annotations take precedence over <code>GsonBuilder</code> -registered type adapters, which in turn take precedence over annotated types. <p>The class referenced by this annotation must be either a TypeAdapter or a TypeAdapterFactory . Using the factory interface makes it possible to delegate to the enclosing <code>Gson</code> instance.
 @since 2.3
 @author Inderjeet Singh
 @author Joel Leitch
 @author Jesse Wilson
 */
@protocol ComGoogleGsonAnnotationsJsonAdapter < JavaLangAnnotationAnnotation >

@property (readonly) IOSClass *value;

@end

@interface ComGoogleGsonAnnotationsJsonAdapter : NSObject < ComGoogleGsonAnnotationsJsonAdapter > {
 @private
  IOSClass *value_;
}

- (instancetype)initWithValue:(IOSClass *)value__;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonAnnotationsJsonAdapter)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonAnnotationsJsonAdapter)

#endif // _ComGoogleGsonAnnotationsJsonAdapter_H_
