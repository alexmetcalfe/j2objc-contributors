//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/JsonArray.java
//

#ifndef _ComGoogleGsonJsonArray_H_
#define _ComGoogleGsonJsonArray_H_

#include "J2ObjC_header.h"
#include "JsonElement.h"
#include "java/lang/Iterable.h"

@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@protocol JavaUtilIterator;

/**
 @brief A class representing an array type in Json.
 An array is a list of JsonElement s each of which can be of a different type. This is an ordered list, meaning that the order in which elements are added is preserved.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface ComGoogleGsonJsonArray : ComGoogleGsonJsonElement < JavaLangIterable >

#pragma mark Public

/**
 @brief Creates an empty JsonArray.
 */
- (instancetype)init;

/**
 @brief Adds the specified element to self.
 @param element the element that needs to be added to the array.
 */
- (void)addWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element;

/**
 @brief Adds all the elements of the specified array to self.
 @param array the array whose elements need to be added to the array.
 */
- (void)addAllWithComGoogleGsonJsonArray:(ComGoogleGsonJsonArray *)array;

/**
 @brief Returns true if this array contains the specified element.
 @return true if this array contains the specified element.
 @param element whose presence in this array is to be tested
 @since 2.3
 */
- (jboolean)containsWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element;

- (jboolean)isEqual:(id)o;

/**
 @brief Returns the ith element of the array.
 @param i the index of the element that is being sought.
 @return the element present at the ith index.
 @throws IndexOutOfBoundsException if i is negative or greater than or equal to the #size() of the array.
 */
- (ComGoogleGsonJsonElement *)getWithInt:(jint)i;

/**
 @brief convenience method to get this array as a BigDecimal if it contains a single element.
 @return get this element as a BigDecimal if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive .
 @throws NumberFormatException if the element at index 0 is not a valid BigDecimal .
 @throws IllegalStateException if the array has more than one element.
 @since 1.2
 */
- (JavaMathBigDecimal *)getAsBigDecimal;

/**
 @brief convenience method to get this array as a BigInteger if it contains a single element.
 @return get this element as a BigInteger if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive .
 @throws NumberFormatException if the element at index 0 is not a valid BigInteger .
 @throws IllegalStateException if the array has more than one element.
 @since 1.2
 */
- (JavaMathBigInteger *)getAsBigInteger;

/**
 @brief convenience method to get this array as a boolean if it contains a single element.
 @return get this element as a boolean if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid boolean.
 @throws IllegalStateException if the array has more than one element.
 */
- (jboolean)getAsBoolean;

- (jbyte)getAsByte;

- (jchar)getAsCharacter;

/**
 @brief convenience method to get this array as a double if it contains a single element.
 @return get this element as a double if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid double.
 @throws IllegalStateException if the array has more than one element.
 */
- (jdouble)getAsDouble;

/**
 @brief convenience method to get this array as a float if it contains a single element.
 @return get this element as a float if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid float.
 @throws IllegalStateException if the array has more than one element.
 */
- (jfloat)getAsFloat;

/**
 @brief convenience method to get this array as an integer if it contains a single element.
 @return get this element as an integer if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid integer.
 @throws IllegalStateException if the array has more than one element.
 */
- (jint)getAsInt;

/**
 @brief convenience method to get this array as a long if it contains a single element.
 @return get this element as a long if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid long.
 @throws IllegalStateException if the array has more than one element.
 */
- (jlong)getAsLong;

/**
 @brief convenience method to get this array as a Number if it contains a single element.
 @return get this element as a number if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid Number.
 @throws IllegalStateException if the array has more than one element.
 */
- (NSNumber *)getAsNumber;

/**
 @brief convenience method to get this array as a primitive short if it contains a single element.
 @return get this element as a primitive short if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid short.
 @throws IllegalStateException if the array has more than one element.
 */
- (jshort)getAsShort;

/**
 @brief convenience method to get this array as a String if it contains a single element.
 @return get this element as a String if it is single element array.
 @throws ClassCastException if the element in the array is of not a JsonPrimitive and is not a valid String.
 @throws IllegalStateException if the array has more than one element.
 */
- (NSString *)getAsString;

- (NSUInteger)hash;

/**
 @brief Returns an iterator to navigate the elemetns of the array.
 Since the array is an ordered list, the iterator navigates the elements in the order they were inserted.
 @return an iterator to navigate the elements of the array.
 */
- (id<JavaUtilIterator>)iterator;

/**
 @brief Removes the element at the specified position in this array.
 Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the array.
 @param index index the index of the element to be removed
 @return the element previously at the specified position
 @throws IndexOutOfBoundsException if the specified index is outside the array bounds
 @since 2.3
 */
- (ComGoogleGsonJsonElement *)removeWithInt:(jint)index;

/**
 @brief Removes the first occurrence of the specified element from this array, if it is present.
 If the array does not contain the element, it is unchanged.
 @param element element to be removed from this array, if present
 @return true if this array contained the specified element, false otherwise
 @since 2.3
 */
- (jboolean)removeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element;

/**
 @brief Replaces the element at the specified position in this array with the specified element.
 Element can be null.
 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throws IndexOutOfBoundsException if the specified index is outside the array bounds
 */
- (ComGoogleGsonJsonElement *)setWithInt:(jint)index
            withComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element;

/**
 @brief Returns the number of elements in the array.
 @return the number of elements in the array.
 */
- (jint)size;

#pragma mark Package-Private

- (ComGoogleGsonJsonArray *)deepCopy;


@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonJsonArray)

FOUNDATION_EXPORT void ComGoogleGsonJsonArray_init(ComGoogleGsonJsonArray *self);

FOUNDATION_EXPORT ComGoogleGsonJsonArray *new_ComGoogleGsonJsonArray_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonJsonArray)

#endif // _ComGoogleGsonJsonArray_H_
