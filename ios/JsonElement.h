//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/JsonElement.java
//

#ifndef _ComGoogleGsonJsonElement_H_
#define _ComGoogleGsonJsonElement_H_

#include "J2ObjC_header.h"

@class ComGoogleGsonJsonArray;
@class ComGoogleGsonJsonNull;
@class ComGoogleGsonJsonObject;
@class ComGoogleGsonJsonPrimitive;
@class JavaLangBoolean;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;

/**
 @brief A class representing an element of Json.
 It could either be a JsonObject , a JsonArray , a JsonPrimitive or a JsonNull .
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface ComGoogleGsonJsonElement : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief convenience method to get this element as a BigDecimal .
 @return get this element as a BigDecimal .
 @throws ClassCastException if the element is of not a JsonPrimitive . * @@throws NumberFormatException if the element is not a valid BigDecimal .
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 @since 1.2
 */
- (JavaMathBigDecimal *)getAsBigDecimal;

/**
 @brief convenience method to get this element as a BigInteger .
 @return get this element as a BigInteger .
 @throws ClassCastException if the element is of not a JsonPrimitive .
 @throws NumberFormatException if the element is not a valid BigInteger .
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 @since 1.2
 */
- (JavaMathBigInteger *)getAsBigInteger;

/**
 @brief convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid boolean value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jboolean)getAsBoolean;

/**
 @brief convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid byte value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 @since 1.3
 */
- (jbyte)getAsByte;

/**
 @brief convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid char value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 @since 1.3
 */
- (jchar)getAsCharacter;

/**
 @brief convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid double value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jdouble)getAsDouble;

/**
 @brief convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid float value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jfloat)getAsFloat;

/**
 @brief convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid integer value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jint)getAsInt;

/**
 @brief convenience method to get this element as a JsonArray .
 If the element is of some other type, a IllegalStateException will result. Hence it is best to use this method after ensuring that this element is of the desired type by calling #isJsonArray() first.
 @return get this element as a JsonArray .
 @throws IllegalStateException if the element is of another type.
 */
- (ComGoogleGsonJsonArray *)getAsJsonArray;

/**
 @brief convenience method to get this element as a JsonNull .
 If the element is of some other type, a IllegalStateException will result. Hence it is best to use this method after ensuring that this element is of the desired type by calling #isJsonNull() first.
 @return get this element as a JsonNull .
 @throws IllegalStateException if the element is of another type.
 @since 1.2
 */
- (ComGoogleGsonJsonNull *)getAsJsonNull;

/**
 @brief convenience method to get this element as a JsonObject .
 If the element is of some other type, a IllegalStateException will result. Hence it is best to use this method after ensuring that this element is of the desired type by calling #isJsonObject() first.
 @return get this element as a JsonObject .
 @throws IllegalStateException if the element is of another type.
 */
- (ComGoogleGsonJsonObject *)getAsJsonObject;

/**
 @brief convenience method to get this element as a JsonPrimitive .
 If the element is of some other type, a IllegalStateException will result. Hence it is best to use this method after ensuring that this element is of the desired type by calling #isJsonPrimitive() first.
 @return get this element as a JsonPrimitive .
 @throws IllegalStateException if the element is of another type.
 */
- (ComGoogleGsonJsonPrimitive *)getAsJsonPrimitive;

/**
 @brief convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid long value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jlong)getAsLong;

/**
 @brief convenience method to get this element as a Number .
 @return get this element as a Number .
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid number.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (NSNumber *)getAsNumber;

/**
 @brief convenience method to get this element as a primitive short value.
 @return get this element as a primitive short value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid short value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (jshort)getAsShort;

/**
 @brief convenience method to get this element as a string value.
 @return get this element as a string value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid string value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (NSString *)getAsString;

/**
 @brief provides check for verifying if this element is an array or not.
 @return true if this element is of type JsonArray , false otherwise.
 */
- (jboolean)isJsonArray;

/**
 @brief provides check for verifying if this element represents a null value or not.
 @return true if this element is of type JsonNull , false otherwise.
 @since 1.2
 */
- (jboolean)isJsonNull;

/**
 @brief provides check for verifying if this element is a Json object or not.
 @return true if this element is of type JsonObject , false otherwise.
 */
- (jboolean)isJsonObject;

/**
 @brief provides check for verifying if this element is a primitive or not.
 @return true if this element is of type JsonPrimitive , false otherwise.
 */
- (jboolean)isJsonPrimitive;

/**
 @brief Returns a String representation of this element.
 */
- (NSString *)description;

#pragma mark Package-Private

/**
 @brief Returns a deep copy of this element.
 Immutable elements like primitives and nulls are not copied.
 */
- (ComGoogleGsonJsonElement *)deepCopy;

/**
 @brief convenience method to get this element as a Boolean value.
 @return get this element as a Boolean value.
 @throws ClassCastException if the element is of not a JsonPrimitive and is not a valid boolean value.
 @throws IllegalStateException if the element is of the type JsonArray but contains more than a single element.
 */
- (JavaLangBoolean *)getAsBooleanWrapper;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonJsonElement)

FOUNDATION_EXPORT void ComGoogleGsonJsonElement_init(ComGoogleGsonJsonElement *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonJsonElement)

#endif // _ComGoogleGsonJsonElement_H_
