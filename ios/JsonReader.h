//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/stream/JsonReader.java
//

#ifndef _ComGoogleGsonStreamJsonReader_H_
#define _ComGoogleGsonStreamJsonReader_H_

#include "J2ObjC_header.h"
#include "java/io/Closeable.h"

@class ComGoogleGsonStreamJsonTokenEnum;
@class JavaIoReader;

/**
 @brief Reads a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>) encoded value as a stream of tokens.
 This stream includes both literal values (strings, numbers, booleans, and nulls) as well as the begin and end delimiters of objects and arrays. The tokens are traversed in depth-first order, the same order that they appear in the JSON document. Within JSON objects, name/value pairs are represented by a single token. <h3>Parsing JSON</h3> To create a recursive descent parser for your own JSON streams, first create an entry point method that creates a <code>JsonReader</code> . <p>Next, create handler methods for each structure in your JSON text. You'll need a method for each object type and for each array type. <ul> <li>Within <strong>array handling</strong> methods, first call #beginArray to consume the array's opening bracket. Then create a while loop that accumulates values, terminating when #hasNext is false. Finally, read the array's closing bracket by calling #endArray . <li>Within <strong>object handling</strong> methods, first call #beginObject to consume the object's opening brace. Then create a while loop that assigns values to local variables based on their name. This loop should terminate when #hasNext is false. Finally, read the object's closing brace by calling #endObject . </ul> <p>When a nested object or array is encountered, delegate to the corresponding handler method. <p>When an unknown name is encountered, strict parsers should fail with an exception. Lenient parsers should call #skipValue() to recursively skip the value's nested tokens, which may otherwise conflict. <p>If a value may be null, you should first check using #peek() . Null literals can be consumed using either #nextNull() or #skipValue() . <h3>Example</h3> Suppose we'd like to parse a stream of messages such as the following: <pre> <code>[</code> { "id": 912345678901, "text": "How do I read a JSON stream in Java?", "geo": null, "user": { "name": "json_newb", "followers_count": 41 } }, { "id": 912345678902, "text": "@@json_newb just use JsonReader!", "geo": [50.454722, -104.606667], "user": { "name": "jesse", "followers_count": 2 } } ]}</pre> This code implements the parser for the above structure: <pre> <code></code> public List<Message> readJsonStream(InputStream in) throws IOException JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8")); try { return readMessagesArray(reader); } finally { reader.close(); } } public List<Message> readMessagesArray(JsonReader reader) throws IOException { List<Message> messages = new ArrayList<Message>(); reader.beginArray(); while (reader.hasNext()) { messages.add(readMessage(reader)); } reader.endArray(); return messages; } public Message readMessage(JsonReader reader) throws IOException { long id = -1; String text = null; User user = null; List<Double> geo = null; reader.beginObject(); while (reader.hasNext()) { String name = reader.nextName(); if (name.equals("id")) { id = reader.nextLong(); } else if (name.equals("text")) { text = reader.nextString(); } else if (name.equals("geo") && reader.peek() != JsonToken.NULL) { geo = readDoublesArray(reader); } else if (name.equals("user")) { user = readUser(reader); } else { reader.skipValue(); } } reader.endObject(); return new Message(id, text, user, geo); } public List<Double> readDoublesArray(JsonReader reader) throws IOException { List<Double> doubles = new ArrayList<Double>(); reader.beginArray(); while (reader.hasNext()) { doubles.add(reader.nextDouble()); } reader.endArray(); return doubles; } public User readUser(JsonReader reader) throws IOException { String username = null; int followersCount = -1; reader.beginObject(); while (reader.hasNext()) { String name = reader.nextName(); if (name.equals("name")) { username = reader.nextString(); } else if (name.equals("followers_count")) { followersCount = reader.nextInt(); } else { reader.skipValue(); } } reader.endObject(); return new User(username, followersCount); }}</pre> <h3>Number Handling</h3> This reader permits numeric values to be read as strings and string values to be read as numbers. For example, both elements of the JSON array <code>[1, "1"]</code> may be read using either #nextInt or #nextString . This behavior is intended to prevent lossy numeric conversions: double is JavaScript's only numeric type and very large values like <code>9007199254740993</code> cannot be represented exactly on that platform. To minimize precision loss, extremely large values should be written and read as strings in JSON. <a name="nonexecuteprefix"/><h3>Non-Execute Prefix</h3> Web servers that serve private data using JSON may be vulnerable to <a href="http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery">Cross-site request forgery</a> attacks. In such an attack, a malicious site gains access to a private JSON file by executing it with an HTML <code><script></code> tag. <p>Prefixing JSON files with <code>")]}'\n"</code> makes them non-executable by <code><script></code> tags, disarming the attack. Since the prefix is malformed JSON, strict parsing fails when it is encountered. This class permits the non-execute prefix when #setLenient(boolean) lenient parsing is enabled. <p>Each <code>JsonReader</code> may be used to read a single JSON stream. Instances of this class are not thread safe.
 @author Jesse Wilson
 @since 1.6
 */
@interface ComGoogleGsonStreamJsonReader : NSObject < JavaIoCloseable >

#pragma mark Public

/**
 @brief Creates a new instance that reads a JSON-encoded stream from <code>in</code> .
 */
- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg;

/**
 @brief Consumes the next token from the JSON stream and asserts that it is the beginning of a new array.
 */
- (void)beginArray;

/**
 @brief Consumes the next token from the JSON stream and asserts that it is the beginning of a new object.
 */
- (void)beginObject;

/**
 @brief Closes this JSON reader and the underlying java.io.Reader .
 */
- (void)close;

/**
 @brief Consumes the next token from the JSON stream and asserts that it is the end of the current array.
 */
- (void)endArray;

/**
 @brief Consumes the next token from the JSON stream and asserts that it is the end of the current object.
 */
- (void)endObject;

/**
 @brief Returns a <a href="http://goessner.net/articles/JsonPath/">JsonPath</a> to the current location in the JSON value.
 */
- (NSString *)getPath;

/**
 @brief Returns true if the current array or object has another element.
 */
- (jboolean)hasNext;

/**
 @brief Returns true if this parser is liberal in what it accepts.
 */
- (jboolean)isLenient;

/**
 @brief Returns the com.google.gson.stream.JsonToken#BOOLEAN boolean value of the next token, consuming it.
 @throws IllegalStateException if the next token is not a boolean or if this reader is closed.
 */
- (jboolean)nextBoolean;

/**
 @brief Returns the com.google.gson.stream.JsonToken#NUMBER double value of the next token, consuming it.
 If the next token is a string, this method will attempt to parse it as a double using Double#parseDouble(String) .
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed as a double, or is non-finite.
 */
- (jdouble)nextDouble;

/**
 @brief Returns the com.google.gson.stream.JsonToken#NUMBER int value of the next token, consuming it.
 If the next token is a string, this method will attempt to parse it as an int. If the next token's numeric value cannot be exactly represented by a Java <code>int</code> , this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed as a number, or exactly represented as an int.
 */
- (jint)nextInt;

/**
 @brief Returns the com.google.gson.stream.JsonToken#NUMBER long value of the next token, consuming it.
 If the next token is a string, this method will attempt to parse it as a long. If the next token's numeric value cannot be exactly represented by a Java <code>long</code> , this method throws.
 @throws IllegalStateException if the next token is not a literal value.
 @throws NumberFormatException if the next literal value cannot be parsed as a number, or exactly represented as a long.
 */
- (jlong)nextLong;

/**
 @brief Returns the next token, a com.google.gson.stream.JsonToken#NAME property name , and consumes it.
 @throws java.io.IOException if the next token in the stream is not a property name.
 */
- (NSString *)nextName;

/**
 @brief Consumes the next token from the JSON stream and asserts that it is a literal null.
 @throws IllegalStateException if the next token is not null or if this reader is closed.
 */
- (void)nextNull;

/**
 @brief Returns the com.google.gson.stream.JsonToken#STRING string value of the next token, consuming it.
 If the next token is a number, this method will return its string form.
 @throws IllegalStateException if the next token is not a string or if this reader is closed.
 */
- (NSString *)nextString;

/**
 @brief Returns the type of the next token without consuming it.
 */
- (ComGoogleGsonStreamJsonTokenEnum *)peek;

/**
 @brief Configure this parser to be  be liberal in what it accepts.
 By default, this parser is strict and only accepts JSON as specified by <a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>. Setting the parser to lenient causes it to ignore the following syntax errors: <ul> <li>Streams that start with the <a href="#nonexecuteprefix">non-execute prefix</a>, <code>")]}'\n"</code>. <li>Streams that include multiple top-level values. With strict parsing, each stream must contain exactly one top-level value. <li>Top-level values of any type. With strict parsing, the top-level value must be an object or an array. <li>Numbers may be Double#isNaN() NaNs or Double#isInfinite() infinities . <li>End of line comments starting with <code>//</code> or <code>#</code> and ending with a newline character. <li>C-style comments starting with <code>/\*</code> and ending with <code>*</code> <code>/</code> . Such comments may not be nested. <li>Names that are unquoted or <code>'single quoted'</code> . <li>Strings that are unquoted or <code>'single quoted'</code> . <li>Array elements separated by <code>;</code> instead of <code>,</code> . <li>Unnecessary array separators. These are interpreted as if null was the omitted value. <li>Names and values separated by <code>=</code> or <code>=></code> instead of <code>:</code> . <li>Name/value pairs separated by <code>;</code> instead of <code>,</code> . </ul>
 */
- (void)setLenientWithBoolean:(jboolean)lenient;

/**
 @brief Skips the next value recursively.
 If it is an object or array, all nested elements are skipped. This method is intended for use when the JSON token stream contains unrecognized or unhandled values.
 */
- (void)skipValue;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleGsonStreamJsonReader)

FOUNDATION_EXPORT void ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReader *self, JavaIoReader *inArg);

FOUNDATION_EXPORT ComGoogleGsonStreamJsonReader *new_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonStreamJsonReader)

#endif // _ComGoogleGsonStreamJsonReader_H_
