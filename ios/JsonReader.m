//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/stream/JsonReader.java
//


#line 1 "jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/stream/JsonReader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonReaderInternalAccess.h"
#include "JsonScope.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "MalformedJsonException.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

#define ComGoogleGsonStreamJsonReader_MIN_INCOMPLETE_INTEGER -922337203685477580LL
#define ComGoogleGsonStreamJsonReader_PEEKED_NONE 0
#define ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT 1
#define ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT 2
#define ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY 3
#define ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY 4
#define ComGoogleGsonStreamJsonReader_PEEKED_TRUE 5
#define ComGoogleGsonStreamJsonReader_PEEKED_FALSE 6
#define ComGoogleGsonStreamJsonReader_PEEKED_NULL 7
#define ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED 8
#define ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED 9
#define ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED 10
#define ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED 11
#define ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME 12
#define ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME 13
#define ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME 14
#define ComGoogleGsonStreamJsonReader_PEEKED_LONG 15
#define ComGoogleGsonStreamJsonReader_PEEKED_NUMBER 16
#define ComGoogleGsonStreamJsonReader_PEEKED_EOF 17
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_NONE 0
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_SIGN 1
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT 2
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DECIMAL 3
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT 4
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E 5
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_SIGN 6
#define ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_DIGIT 7

@interface ComGoogleGsonStreamJsonReader () {
 @public
  /**
   @brief The input JSON.
   */
  JavaIoReader *in_;
  /**
   @brief True to accept non-spec compliant JSON
   */
  jboolean lenient_;
  /**
   @brief Use a manual buffer to easily read and unread upcoming characters, and also so we can create strings without an intermediate StringBuilder.
   We decode literals directly out of this buffer, so it must be at least as long as the longest token that can be reported as a number.
   */
  IOSCharArray *buffer_;
  jint pos_;
  jint limit_;
  jint lineNumber_;
  jint lineStart_;
  jint peeked_;
  /**
   @brief A peeked value that was composed entirely of digits with an optional leading dash.
   Positive values may not have a leading 0.
   */
  jlong peekedLong_;
  /**
   @brief The number of characters in a peeked number literal.
   Increment 'pos' by this after reading a number.
   */
  jint peekedNumberLength_;
  /**
   @brief A peeked string that should be parsed on the next double, long or string.
   This is populated before a numeric value is parsed and used if that parsing fails.
   */
  NSString *peekedString_;
  IOSIntArray *stack_;
  jint stackSize_;
  IOSObjectArray *pathNames_;
  IOSIntArray *pathIndices_;
}

- (jint)doPeek;

- (jint)peekKeyword;

- (jint)peekNumber;

- (jboolean)isLiteralWithChar:(jchar)c;

/**
 @brief Returns the string up to but not including <code>quote</code> , unescaping any character escape sequences encountered along the way.
 The opening quote should have already been read. This consumes the closing quote, but does not include it in the returned string.
 @param quote either ' or ".
 @throws NumberFormatException if any unicode escape sequences are malformed.
 */
- (NSString *)nextQuotedValueWithChar:(jchar)quote;

/**
 @brief Returns an unquoted value as a string.
 */
- (NSString *)nextUnquotedValue;

- (void)skipQuotedValueWithChar:(jchar)quote;

- (void)skipUnquotedValue;

- (void)pushWithInt:(jint)newTop;

/**
 @brief Returns true once <code>limit - pos >= minimum</code> .
 If the data is exhausted before that many characters are available, this returns false.
 */
- (jboolean)fillBufferWithInt:(jint)minimum;

- (jint)getLineNumber;

- (jint)getColumnNumber;

/**
 @brief Returns the next character in the stream that is neither whitespace nor a part of a comment.
 When this returns, the returned character is always at <code>buffer[pos-1]</code> ; this means the caller can always push back the returned character by decrementing <code>pos</code> .
 */
- (jint)nextNonWhitespaceWithBoolean:(jboolean)throwOnEof;

- (void)checkLenient;

/**
 @brief Advances the position until after the next newline character.
 If the line is terminated by "\r\n", the '\n' must be consumed as whitespace by the caller.
 */
- (void)skipToEndOfLine;

/**
 @param toFind a string to search for. Must not contain a newline.
 */
- (jboolean)skipToWithNSString:(NSString *)toFind;

/**
 @brief Unescapes the character identified by the character or characters that immediately follow a backslash.
 The backslash '\' should have already been read. This supports both unicode escapes "u000A" and two-character escapes "\n".
 @throws NumberFormatException if any unicode escape sequences are malformed.
 */
- (jchar)readEscapeCharacter;

/**
 @brief Throws a new IO exception with the given message and a context snippet with this reader's content.
 */
- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message;

/**
 @brief Consumes the non-execute prefix if it exists.
 */
- (void)consumeNonExecutePrefix;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, in_, JavaIoReader *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, peekedString_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, stack_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, pathNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonReader, pathIndices_, IOSIntArray *)

static IOSCharArray *ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NON_EXECUTE_PREFIX_, IOSCharArray *)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, MIN_INCOMPLETE_INTEGER, jlong)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_BEGIN_OBJECT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_END_OBJECT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_BEGIN_ARRAY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_END_ARRAY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_TRUE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_FALSE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_NULL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_SINGLE_QUOTED, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_DOUBLE_QUOTED, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_UNQUOTED, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_BUFFERED, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_SINGLE_QUOTED_NAME, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_DOUBLE_QUOTED_NAME, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_UNQUOTED_NAME, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_LONG, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_NUMBER, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, PEEKED_EOF, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_SIGN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_DIGIT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_DECIMAL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_FRACTION_DIGIT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_EXP_E, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_EXP_SIGN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonReader, NUMBER_CHAR_EXP_DIGIT, jint)

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_doPeek(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_peekKeyword(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_peekNumber(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jboolean ComGoogleGsonStreamJsonReader_isLiteralWithChar_(ComGoogleGsonStreamJsonReader *self, jchar c);

__attribute__((unused)) static NSString *ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(ComGoogleGsonStreamJsonReader *self, jchar quote);

__attribute__((unused)) static NSString *ComGoogleGsonStreamJsonReader_nextUnquotedValue(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_skipQuotedValueWithChar_(ComGoogleGsonStreamJsonReader *self, jchar quote);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_skipUnquotedValue(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_pushWithInt_(ComGoogleGsonStreamJsonReader *self, jint newTop);

__attribute__((unused)) static jboolean ComGoogleGsonStreamJsonReader_fillBufferWithInt_(ComGoogleGsonStreamJsonReader *self, jint minimum);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_getLineNumber(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_getColumnNumber(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(ComGoogleGsonStreamJsonReader *self, jboolean throwOnEof);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_checkLenient(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_skipToEndOfLine(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static jboolean ComGoogleGsonStreamJsonReader_skipToWithNSString_(ComGoogleGsonStreamJsonReader *self, NSString *toFind);

__attribute__((unused)) static jchar ComGoogleGsonStreamJsonReader_readEscapeCharacter(ComGoogleGsonStreamJsonReader *self);

__attribute__((unused)) static JavaIoIOException *ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(ComGoogleGsonStreamJsonReader *self, NSString *message);

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_consumeNonExecutePrefix(ComGoogleGsonStreamJsonReader *self);

@interface ComGoogleGsonStreamJsonReader_$1 : ComGoogleGsonInternalJsonReaderInternalAccess

- (void)promoteNameToValueWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)reader;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonStreamJsonReader_$1)

__attribute__((unused)) static void ComGoogleGsonStreamJsonReader_$1_init(ComGoogleGsonStreamJsonReader_$1 *self);

__attribute__((unused)) static ComGoogleGsonStreamJsonReader_$1 *new_ComGoogleGsonStreamJsonReader_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonStreamJsonReader_$1)

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonStreamJsonReader)


#line 190
@implementation ComGoogleGsonStreamJsonReader


#line 289
- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(self, inArg);
  return self;
}


#line 325
- (void)setLenientWithBoolean:(jboolean)lenient {
  self->lenient_ = lenient;
}


#line 332
- (jboolean)isLenient {
  return lenient_;
}


#line 340
- (void)beginArray {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY) {
    ComGoogleGsonStreamJsonReader_pushWithInt_(self, ComGoogleGsonStreamJsonScope_EMPTY_ARRAY);
    *IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1) = 0;
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  else {
    
#line 350
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected BEGIN_ARRAY but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 351
    [self getPath]));
  }
}

- (void)endArray {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY) {
    stackSize_--;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  else {
    
#line 369
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected END_ARRAY but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 370
    [self getPath]));
  }
}

- (void)beginObject {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT) {
    ComGoogleGsonStreamJsonReader_pushWithInt_(self, ComGoogleGsonStreamJsonScope_EMPTY_OBJECT);
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  else {
    
#line 387
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected BEGIN_OBJECT but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 388
    [self getPath]));
  }
}

- (void)endObject {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT) {
    stackSize_--;
    (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_, nil);
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  else {
    
#line 407
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected END_OBJECT but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 408
    [self getPath]));
  }
}


#line 415
- (jboolean)hasNext {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  return p != ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT && p != ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY;
}


#line 426
- (ComGoogleGsonStreamJsonTokenEnum *)peek {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  
#line 432
  switch (p) {
    case ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT:
    return ComGoogleGsonStreamJsonTokenEnum_get_BEGIN_OBJECT();
    case ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT:
    return ComGoogleGsonStreamJsonTokenEnum_get_END_OBJECT();
    case ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY:
    return ComGoogleGsonStreamJsonTokenEnum_get_BEGIN_ARRAY();
    case ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY:
    return ComGoogleGsonStreamJsonTokenEnum_get_END_ARRAY();
    case ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME:
    case ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME:
    case ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME:
    return ComGoogleGsonStreamJsonTokenEnum_get_NAME();
    case ComGoogleGsonStreamJsonReader_PEEKED_TRUE:
    case ComGoogleGsonStreamJsonReader_PEEKED_FALSE:
    return ComGoogleGsonStreamJsonTokenEnum_get_BOOLEAN();
    case ComGoogleGsonStreamJsonReader_PEEKED_NULL:
    return ComGoogleGsonStreamJsonTokenEnum_get_NULL();
    case ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED:
    case ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED:
    case ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED:
    case ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED:
    return ComGoogleGsonStreamJsonTokenEnum_get_STRING();
    case ComGoogleGsonStreamJsonReader_PEEKED_LONG:
    case ComGoogleGsonStreamJsonReader_PEEKED_NUMBER:
    return ComGoogleGsonStreamJsonTokenEnum_get_NUMBER();
    case ComGoogleGsonStreamJsonReader_PEEKED_EOF:
    return ComGoogleGsonStreamJsonTokenEnum_get_END_DOCUMENT();
    default:
    @throw new_JavaLangAssertionError_init();
  }
}


#line 465
- (jint)doPeek {
  return ComGoogleGsonStreamJsonReader_doPeek(self);
}


#line 608
- (jint)peekKeyword {
  return ComGoogleGsonStreamJsonReader_peekKeyword(self);
}


#line 652
- (jint)peekNumber {
  return ComGoogleGsonStreamJsonReader_peekNumber(self);
}


#line 755
- (jboolean)isLiteralWithChar:(jchar)c {
  return ComGoogleGsonStreamJsonReader_isLiteralWithChar_(self, c);
}


#line 787
- (NSString *)nextName {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  NSString *result;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME) {
    result = ComGoogleGsonStreamJsonReader_nextUnquotedValue(self);
  }
  else
#line 795
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
    result = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, '\'');
  }
  else
#line 797
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
    result = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, '"');
  }
  else {
    
#line 800
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a name but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 801
    [self getPath]));
  }
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_ - 1, result);
  return result;
}


#line 816
- (NSString *)nextString {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  NSString *result;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED) {
    result = ComGoogleGsonStreamJsonReader_nextUnquotedValue(self);
  }
  else
#line 824
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED) {
    result = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, '\'');
  }
  else
#line 826
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    result = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, '"');
  }
  else
#line 828
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED) {
    result = peekedString_;
    peekedString_ = nil;
  }
  else
#line 831
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_LONG) {
    result = JavaLangLong_toStringWithLong_(peekedLong_);
  }
  else
#line 833
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NUMBER) {
    result = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else {
    
#line 837
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a string but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 838
    [self getPath]));
  }
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}


#line 852
- (jboolean)nextBoolean {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_TRUE) {
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return YES;
  }
  else
#line 861
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_FALSE) {
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return NO;
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a boolean but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 867
  [self getPath]));
}


#line 877
- (void)nextNull {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NULL) {
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  }
  else {
    
#line 886
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected null but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 887
    [self getPath]));
  }
}


#line 900
- (jdouble)nextDouble {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  
#line 906
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_LONG) {
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return (jdouble) peekedLong_;
  }
  
#line 912
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else
#line 915
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED || p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
  }
  else
#line 917
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED) {
    peekedString_ = ComGoogleGsonStreamJsonReader_nextUnquotedValue(self);
  }
  else
#line 919
  if (p != ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a double but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 921
    [self getPath]));
  }
  
#line 924
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED;
  jdouble result = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  if (!lenient_ && (JavaLangDouble_isNaNWithDouble_(result) || JavaLangDouble_isInfiniteWithDouble_(result))) {
    @throw new_ComGoogleGsonStreamMalformedJsonException_initWithNSString_(JreStrcat("$D$I$I$$", @"JSON forbids NaN and infinities: ", result, @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 928
    [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}


#line 946
- (jlong)nextLong {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  
#line 952
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_LONG) {
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return peekedLong_;
  }
  
#line 958
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else
#line 961
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED || p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
    @try {
      jlong result = JavaLangLong_parseLongWithNSString_(peekedString_);
      peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
      return result;
    }
    @catch (
#line 968
    JavaLangNumberFormatException *ignored) {
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a long but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 973
    [self getPath]));
  }
  
#line 976
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED;
  jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  jlong result = J2ObjCFpToLong(asDouble);
  if (result != asDouble) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$$I$I$$", @"Expected a long but was ", peekedString_, @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 981
    [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}


#line 999
- (NSString *)nextQuotedValueWithChar:(jchar)quote {
  return ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, quote);
}


#line 1040
- (NSString *)nextUnquotedValue {
  return ComGoogleGsonStreamJsonReader_nextUnquotedValue(self);
}


#line 1101
- (void)skipQuotedValueWithChar:(jchar)quote {
  ComGoogleGsonStreamJsonReader_skipQuotedValueWithChar_(self, quote);
}


#line 1128
- (void)skipUnquotedValue {
  ComGoogleGsonStreamJsonReader_skipUnquotedValue(self);
}


#line 1168
- (jint)nextInt {
  jint p = peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(self);
  }
  
#line 1174
  jint result;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_LONG) {
    result = (jint) peekedLong_;
    if (peekedLong_ != result) {
      @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$J$I$I$$", @"Expected an int but was ", peekedLong_, @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 1179
      [self getPath]));
    }
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return result;
  }
  
#line 1186
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else
#line 1189
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED || p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(self, p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
    @try {
      result = JavaLangInteger_parseIntWithNSString_(peekedString_);
      peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
      return result;
    }
    @catch (
#line 1196
    JavaLangNumberFormatException *ignored) {
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected an int but was ", [self peek], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 1201
    [self getPath]));
  }
  
#line 1204
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED;
  jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  result = J2ObjCFpToInt(asDouble);
  if (result != asDouble) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$$I$I$$", @"Expected an int but was ", peekedString_, @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 1209
    [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}


#line 1220
- (void)close {
  peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  *IOSIntArray_GetRef(nil_chk(stack_), 0) = ComGoogleGsonStreamJsonScope_CLOSED;
  stackSize_ = 1;
  [((JavaIoReader *) nil_chk(in_)) close];
}


#line 1232
- (void)skipValue {
  jint count = 0;
  do {
    jint p = peeked_;
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
      p = ComGoogleGsonStreamJsonReader_doPeek(self);
    }
    
#line 1240
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY) {
      ComGoogleGsonStreamJsonReader_pushWithInt_(self, ComGoogleGsonStreamJsonScope_EMPTY_ARRAY);
      count++;
    }
    else
#line 1243
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT) {
      ComGoogleGsonStreamJsonReader_pushWithInt_(self, ComGoogleGsonStreamJsonScope_EMPTY_OBJECT);
      count++;
    }
    else
#line 1246
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY) {
      stackSize_--;
      count--;
    }
    else
#line 1249
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT) {
      stackSize_--;
      count--;
    }
    else
#line 1252
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME || p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED) {
      ComGoogleGsonStreamJsonReader_skipUnquotedValue(self);
    }
    else
#line 1254
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED || p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
      ComGoogleGsonStreamJsonReader_skipQuotedValueWithChar_(self, '\'');
    }
    else
#line 1256
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED || p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
      ComGoogleGsonStreamJsonReader_skipQuotedValueWithChar_(self, '"');
    }
    else
#line 1258
    if (p == ComGoogleGsonStreamJsonReader_PEEKED_NUMBER) {
      pos_ += peekedNumberLength_;
    }
    peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  while (
#line 1262
  count != 0);
  
#line 1264
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_ - 1, @"null");
}


#line 1268
- (void)pushWithInt:(jint)newTop {
  ComGoogleGsonStreamJsonReader_pushWithInt_(self, newTop);
}


#line 1288
- (jboolean)fillBufferWithInt:(jint)minimum {
  return ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, minimum);
}


#line 1317
- (jint)getLineNumber {
  return ComGoogleGsonStreamJsonReader_getLineNumber(self);
}

- (jint)getColumnNumber {
  return ComGoogleGsonStreamJsonReader_getColumnNumber(self);
}


#line 1331
- (jint)nextNonWhitespaceWithBoolean:(jboolean)throwOnEof {
  return ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, throwOnEof);
}


#line 1421
- (void)checkLenient {
  ComGoogleGsonStreamJsonReader_checkLenient(self);
}


#line 1432
- (void)skipToEndOfLine {
  ComGoogleGsonStreamJsonReader_skipToEndOfLine(self);
}


#line 1448
- (jboolean)skipToWithNSString:(NSString *)toFind {
  return ComGoogleGsonStreamJsonReader_skipToWithNSString_(self, toFind);
}


#line 1466
- (NSString *)description {
  return JreStrcat("$$I$I", [[self getClass] getSimpleName], @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self));
}


#line 1475
- (NSString *)getPath {
  JavaLangStringBuilder *result = [new_JavaLangStringBuilder_init() appendWithChar:'$'];
  for (jint i = 0, size = stackSize_; i < size; i++) {
    switch (IOSIntArray_Get(nil_chk(stack_), i)) {
      case ComGoogleGsonStreamJsonScope_EMPTY_ARRAY:
      case ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY:
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'['])) appendWithInt:IOSIntArray_Get(nil_chk(pathIndices_), i)])) appendWithChar:']'];
      break;
      
#line 1484
      case ComGoogleGsonStreamJsonScope_EMPTY_OBJECT:
      case ComGoogleGsonStreamJsonScope_DANGLING_NAME:
      case ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT:
      (void) [((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'.'];
      if (IOSObjectArray_Get(nil_chk(pathNames_), i) != nil) {
        (void) [result appendWithNSString:IOSObjectArray_Get(pathNames_, i)];
      }
      break;
      
#line 1493
      case ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT:
      case ComGoogleGsonStreamJsonScope_EMPTY_DOCUMENT:
      case ComGoogleGsonStreamJsonScope_CLOSED:
      break;
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(result)) description];
}


#line 1511
- (jchar)readEscapeCharacter {
  return ComGoogleGsonStreamJsonReader_readEscapeCharacter(self);
}


#line 1572
- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message {
  return ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, message);
}


#line 1580
- (void)consumeNonExecutePrefix {
  ComGoogleGsonStreamJsonReader_consumeNonExecutePrefix(self);
}

+ (void)initialize {
  if (self == [ComGoogleGsonStreamJsonReader class]) {
    ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_ =
#line 192
    [@")]}'\n" toCharArray];
    {
      
#line 1600
      (void) ComGoogleGsonInternalJsonReaderInternalAccess_set_INSTANCE_(new_ComGoogleGsonStreamJsonReader_$1_init());
    }
    J2OBJC_SET_INITIALIZED(ComGoogleGsonStreamJsonReader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", "JsonReader", NULL, 0x1, NULL, NULL },
    { "setLenientWithBoolean:", "setLenient", "V", 0x11, NULL, NULL },
    { "isLenient", NULL, "Z", 0x11, NULL, NULL },
    { "beginArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "beginObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "hasNext", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "peek", NULL, "Lcom.google.gson.stream.JsonToken;", 0x1, "Ljava.io.IOException;", NULL },
    { "doPeek", NULL, "I", 0x2, "Ljava.io.IOException;", NULL },
    { "peekKeyword", NULL, "I", 0x2, "Ljava.io.IOException;", NULL },
    { "peekNumber", NULL, "I", 0x2, "Ljava.io.IOException;", NULL },
    { "isLiteralWithChar:", "isLiteral", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "nextName", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextString", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextBoolean", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "nextNull", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "nextDouble", NULL, "D", 0x1, "Ljava.io.IOException;", NULL },
    { "nextLong", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "nextQuotedValueWithChar:", "nextQuotedValue", "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "nextUnquotedValue", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "skipQuotedValueWithChar:", "skipQuotedValue", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipUnquotedValue", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "nextInt", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "skipValue", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "pushWithInt:", "push", "V", 0x2, NULL, NULL },
    { "fillBufferWithInt:", "fillBuffer", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "getLineNumber", NULL, "I", 0x2, NULL, NULL },
    { "getColumnNumber", NULL, "I", 0x2, NULL, NULL },
    { "nextNonWhitespaceWithBoolean:", "nextNonWhitespace", "I", 0x2, "Ljava.io.IOException;", NULL },
    { "checkLenient", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipToEndOfLine", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipToWithNSString:", "skipTo", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "readEscapeCharacter", NULL, "C", 0x2, "Ljava.io.IOException;", NULL },
    { "syntaxErrorWithNSString:", "syntaxError", "Ljava.io.IOException;", 0x2, "Ljava.io.IOException;", NULL },
    { "consumeNonExecutePrefix", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NON_EXECUTE_PREFIX_", NULL, 0x1a, "[C", &ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_, NULL,  },
    { "MIN_INCOMPLETE_INTEGER_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComGoogleGsonStreamJsonReader_MIN_INCOMPLETE_INTEGER },
    { "PEEKED_NONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_NONE },
    { "PEEKED_BEGIN_OBJECT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT },
    { "PEEKED_END_OBJECT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT },
    { "PEEKED_BEGIN_ARRAY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY },
    { "PEEKED_END_ARRAY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY },
    { "PEEKED_TRUE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_TRUE },
    { "PEEKED_FALSE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_FALSE },
    { "PEEKED_NULL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_NULL },
    { "PEEKED_SINGLE_QUOTED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED },
    { "PEEKED_DOUBLE_QUOTED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED },
    { "PEEKED_UNQUOTED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED },
    { "PEEKED_BUFFERED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_BUFFERED },
    { "PEEKED_SINGLE_QUOTED_NAME_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME },
    { "PEEKED_DOUBLE_QUOTED_NAME_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME },
    { "PEEKED_UNQUOTED_NAME_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME },
    { "PEEKED_LONG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_LONG },
    { "PEEKED_NUMBER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_NUMBER },
    { "PEEKED_EOF_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_PEEKED_EOF },
    { "NUMBER_CHAR_NONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_NONE },
    { "NUMBER_CHAR_SIGN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_SIGN },
    { "NUMBER_CHAR_DIGIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT },
    { "NUMBER_CHAR_DECIMAL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DECIMAL },
    { "NUMBER_CHAR_FRACTION_DIGIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT },
    { "NUMBER_CHAR_EXP_E_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E },
    { "NUMBER_CHAR_EXP_SIGN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_SIGN },
    { "NUMBER_CHAR_EXP_DIGIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_DIGIT },
    { "in_", NULL, 0x12, "Ljava.io.Reader;", NULL, NULL,  },
    { "lenient_", NULL, 0x2, "Z", NULL, NULL,  },
    { "buffer_", NULL, 0x12, "[C", NULL, NULL,  },
    { "pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "limit_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineNumber_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineStart_", NULL, 0x2, "I", NULL, NULL,  },
    { "peeked_", NULL, 0x2, "I", NULL, NULL,  },
    { "peekedLong_", NULL, 0x2, "J", NULL, NULL,  },
    { "peekedNumberLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "peekedString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "stack_", NULL, 0x2, "[I", NULL, NULL,  },
    { "stackSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "pathNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "pathIndices_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComGoogleGsonStreamJsonReader = { 2, "JsonReader", "com.google.gson.stream", NULL, 0x1, 39, methods, 43, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonStreamJsonReader;
}

@end


#line 289
void ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(ComGoogleGsonStreamJsonReader *self, JavaIoReader *inArg) {
  (void) NSObject_init(self);
  self->lenient_ =
#line 230
  NO;
  self->buffer_ = [IOSCharArray newArrayWithLength:
#line 238
  1024];
  self->pos_ = 0;
  self->limit_ = 0;
  self->lineNumber_ =
#line 242
  0;
  self->lineStart_ = 0;
  self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  self->stack_ = [IOSIntArray newArrayWithLength:
#line 269
  32];
  self->stackSize_ = 0;
  {
    *IOSIntArray_GetRef(self->stack_, self->stackSize_++) = ComGoogleGsonStreamJsonScope_EMPTY_DOCUMENT;
  }
  self->pathNames_ = [IOSObjectArray newArrayWithLength:
#line 283
  32 type:NSString_class_()];
  self->pathIndices_ = [IOSIntArray newArrayWithLength:32];
  
#line 290
  if (inArg == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  self->in_ = inArg;
}


#line 289
ComGoogleGsonStreamJsonReader *new_ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  ComGoogleGsonStreamJsonReader *self = [ComGoogleGsonStreamJsonReader alloc];
  ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(self, inArg);
  return self;
}


#line 465
jint ComGoogleGsonStreamJsonReader_doPeek(ComGoogleGsonStreamJsonReader *self) {
  jint peekStack = IOSIntArray_Get(nil_chk(self->stack_), self->stackSize_ - 1);
  if (peekStack == ComGoogleGsonStreamJsonScope_EMPTY_ARRAY) {
    *IOSIntArray_GetRef(self->stack_, self->stackSize_ - 1) = ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY;
  }
  else
#line 469
  if (peekStack == ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY) {
    
#line 471
    jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
    switch (c) {
      case ']':
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY;
      case ';':
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      case ',':
      break;
      default:
      @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated array");
    }
  }
  else
#line 482
  if (peekStack == ComGoogleGsonStreamJsonScope_EMPTY_OBJECT || peekStack == ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT) {
    *IOSIntArray_GetRef(self->stack_, self->stackSize_ - 1) = ComGoogleGsonStreamJsonScope_DANGLING_NAME;
    
#line 485
    if (peekStack == ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT) {
      jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
      switch (c) {
        case '}':
        return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT;
        case ';':
        ComGoogleGsonStreamJsonReader_checkLenient(self);
        case ',':
        break;
        default:
        @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated object");
      }
    }
    jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
    switch (c) {
      case '"':
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME;
      case '\'':
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME;
      case '}':
      if (peekStack != ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT) {
        return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_END_OBJECT;
      }
      else {
        
#line 509
        @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected name");
      }
      default:
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      self->pos_--;
      if (ComGoogleGsonStreamJsonReader_isLiteralWithChar_(self, (jchar) c)) {
        return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME;
      }
      else {
        
#line 517
        @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected name");
      }
    }
  }
  else
#line 520
  if (peekStack == ComGoogleGsonStreamJsonScope_DANGLING_NAME) {
    *IOSIntArray_GetRef(self->stack_, self->stackSize_ - 1) = ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT;
    
#line 523
    jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
    switch (c) {
      case ':':
      break;
      case '=':
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      if ((self->pos_ < self->limit_ || ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) && IOSCharArray_Get(nil_chk(self->buffer_), self->pos_) == '>') {
        self->pos_++;
      }
      break;
      default:
      @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected ':'");
    }
  }
  else
#line 536
  if (peekStack == ComGoogleGsonStreamJsonScope_EMPTY_DOCUMENT) {
    if (self->lenient_) {
      ComGoogleGsonStreamJsonReader_consumeNonExecutePrefix(self);
    }
    *IOSIntArray_GetRef(self->stack_, self->stackSize_ - 1) = ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT;
  }
  else
#line 541
  if (peekStack == ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT) {
    jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, NO);
    if (c == -1) {
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_EOF;
    }
    else {
      
#line 546
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      self->pos_--;
    }
  }
  else
#line 549
  if (peekStack == ComGoogleGsonStreamJsonScope_CLOSED) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonReader is closed");
  }
  
#line 553
  jint c = ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
  switch (c) {
    case ']':
    if (peekStack == ComGoogleGsonStreamJsonScope_EMPTY_ARRAY) {
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_END_ARRAY;
    }
    
#line 560
    case ';':
    case ',':
    
#line 563
    if (peekStack == ComGoogleGsonStreamJsonScope_EMPTY_ARRAY || peekStack == ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY) {
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      self->pos_--;
      return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NULL;
    }
    else {
      
#line 568
      @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unexpected value");
    }
    case '\'':
    ComGoogleGsonStreamJsonReader_checkLenient(self);
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED;
    case '"':
    if (self->stackSize_ == 1) {
      ComGoogleGsonStreamJsonReader_checkLenient(self);
    }
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED;
    case '[':
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_ARRAY;
    case '{':
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_BEGIN_OBJECT;
    default:
    self->pos_--;
  }
  
#line 586
  if (self->stackSize_ == 1) {
    ComGoogleGsonStreamJsonReader_checkLenient(self);
  }
  
#line 590
  jint result = ComGoogleGsonStreamJsonReader_peekKeyword(self);
  if (result != ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    return result;
  }
  
#line 595
  result = ComGoogleGsonStreamJsonReader_peekNumber(self);
  if (result != ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    return result;
  }
  
#line 600
  if (!ComGoogleGsonStreamJsonReader_isLiteralWithChar_(self, IOSCharArray_Get(nil_chk(self->buffer_), self->pos_))) {
    @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected value");
  }
  
#line 604
  ComGoogleGsonStreamJsonReader_checkLenient(self);
  return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED;
}


#line 608
jint ComGoogleGsonStreamJsonReader_peekKeyword(ComGoogleGsonStreamJsonReader *self) {
  
#line 610
  jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_);
  NSString *keyword;
  NSString *keywordUpper;
  jint peeking;
  if (c == 't' || c == 'T') {
    keyword = @"true";
    keywordUpper = @"TRUE";
    peeking = ComGoogleGsonStreamJsonReader_PEEKED_TRUE;
  }
  else
#line 618
  if (c == 'f' || c == 'F') {
    keyword = @"false";
    keywordUpper = @"FALSE";
    peeking = ComGoogleGsonStreamJsonReader_PEEKED_FALSE;
  }
  else
#line 622
  if (c == 'n' || c == 'N') {
    keyword = @"null";
    keywordUpper = @"NULL";
    peeking = ComGoogleGsonStreamJsonReader_PEEKED_NULL;
  }
  else {
    
#line 627
    return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  
#line 631
  jint length = ((jint) [((NSString *) nil_chk(keyword)) length]);
  for (jint i = 1; i < length; i++) {
    if (self->pos_ + i >= self->limit_ && !ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    }
    c = IOSCharArray_Get(self->buffer_, self->pos_ + i);
    if (c != [keyword charAtWithInt:i] && c != [((NSString *) nil_chk(keywordUpper)) charAtWithInt:i]) {
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
    }
  }
  
#line 642
  if ((self->pos_ + length < self->limit_ || ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, length + 1)) && ComGoogleGsonStreamJsonReader_isLiteralWithChar_(self, IOSCharArray_Get(self->buffer_,
#line 643
  self->pos_ + length))) {
    return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
  
#line 648
  self->pos_ += length;
  return self->peeked_ = peeking;
}


#line 652
jint ComGoogleGsonStreamJsonReader_peekNumber(ComGoogleGsonStreamJsonReader *self) {
  
#line 654
  IOSCharArray *buffer = self->buffer_;
  jint p = self->pos_;
  jint l = self->limit_;
  
#line 658
  jlong value = 0;
  jboolean negative = NO;
  jboolean fitsInLong = YES;
  jint last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_NONE;
  
#line 663
  jint i = 0;
  
#line 666
  for (; YES; i++) {
    if (p + i == l) {
      if (i == ((IOSCharArray *) nil_chk(buffer))->size_) {
        
#line 671
        return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      }
      if (!ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
        break;
      }
      p = self->pos_;
      l = self->limit_;
    }
    
#line 680
    jchar c = IOSCharArray_Get(nil_chk(buffer), p + i);
    switch (c) {
      case '-':
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_NONE) {
        negative = YES;
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_SIGN;
        continue;
      }
      else
#line 687
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_SIGN;
        continue;
      }
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      
#line 693
      case '+':
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_SIGN;
        continue;
      }
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      
#line 700
      case 'e':
      case 'E':
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT || last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E;
        continue;
      }
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      
#line 708
      case '.':
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DECIMAL;
        continue;
      }
      return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      
#line 715
      default:
      if (c < '0' || c > '9') {
        if (!ComGoogleGsonStreamJsonReader_isLiteralWithChar_(self, c)) {
          goto break_charactersOfNumber;
        }
        return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
      }
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_SIGN || last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_NONE) {
        value = -(c - '0');
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT;
      }
      else
#line 725
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT) {
        if (value == 0) {
          return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
        }
        jlong newValue = value * 10 - (c - '0');
        fitsInLong &= (value > ComGoogleGsonStreamJsonReader_MIN_INCOMPLETE_INTEGER ||
#line 731
        (value == ComGoogleGsonStreamJsonReader_MIN_INCOMPLETE_INTEGER && newValue < value));
        value = newValue;
      }
      else
#line 733
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DECIMAL) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT;
      }
      else
#line 735
      if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_E || last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_SIGN) {
        last = ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_DIGIT;
      }
    }
  }
  break_charactersOfNumber: ;
  
#line 742
  if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT && fitsInLong && (value != JavaLangLong_MIN_VALUE || negative)) {
    self->peekedLong_ = negative ? value : -value;
    self->pos_ += i;
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_LONG;
  }
  else
#line 746
  if (last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_DIGIT || last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT ||
#line 747
  last == ComGoogleGsonStreamJsonReader_NUMBER_CHAR_EXP_DIGIT) {
    self->peekedNumberLength_ = i;
    return self->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_NUMBER;
  }
  else {
    
#line 751
    return ComGoogleGsonStreamJsonReader_PEEKED_NONE;
  }
}


#line 755
jboolean ComGoogleGsonStreamJsonReader_isLiteralWithChar_(ComGoogleGsonStreamJsonReader *self, jchar c) {
  switch (c) {
    case '/':
    case '\\':
    case ';':
    case '#':
    case '=':
    ComGoogleGsonStreamJsonReader_checkLenient(self);
    case '{':
    case '}':
    case '[':
    case ']':
    case ':':
    case ',':
    case ' ':
    case 0x0009:
    case 0x000c:
    case 0x000d:
    case 0x000a:
    return NO;
    default:
    return YES;
  }
}


#line 999
NSString *ComGoogleGsonStreamJsonReader_nextQuotedValueWithChar_(ComGoogleGsonStreamJsonReader *self, jchar quote) {
  
#line 1001
  IOSCharArray *buffer = self->buffer_;
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  while (YES) {
    jint p = self->pos_;
    jint l = self->limit_;
    
#line 1007
    jint start = p;
    while (p < l) {
      jint c = IOSCharArray_Get(nil_chk(buffer), p++);
      
#line 1011
      if (c == quote) {
        self->pos_ = p;
        (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start - 1];
        return [builder description];
      }
      else
#line 1015
      if (c == '\\') {
        self->pos_ = p;
        (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start - 1];
        (void) [builder appendWithChar:ComGoogleGsonStreamJsonReader_readEscapeCharacter(self)];
        p = self->pos_;
        l = self->limit_;
        start = p;
      }
      else
#line 1022
      if (c == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = p;
      }
    }
    
#line 1028
    (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start];
    self->pos_ = p;
    if (!ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) {
      @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated string");
    }
  }
}


#line 1040
NSString *ComGoogleGsonStreamJsonReader_nextUnquotedValue(ComGoogleGsonStreamJsonReader *self) {
  JavaLangStringBuilder *builder = nil;
  jint i = 0;
  
#line 1045
  while (YES) {
    for (; self->pos_ + i < self->limit_; i++) {
      switch (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i)) {
        case '/':
        case '\\':
        case ';':
        case '#':
        case '=':
        ComGoogleGsonStreamJsonReader_checkLenient(self);
        case '{':
        case '}':
        case '[':
        case ']':
        case ':':
        case ',':
        case ' ':
        case 0x0009:
        case 0x000c:
        case 0x000d:
        case 0x000a:
        goto break_findNonLiteralCharacter;
      }
    }
    
#line 1070
    if (i < ((IOSCharArray *) nil_chk(self->buffer_))->size_) {
      if (ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
        continue;
      }
      else {
        
#line 1074
        break;
      }
    }
    
#line 1079
    if (builder == nil) {
      builder = new_JavaLangStringBuilder_init();
    }
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    self->pos_ += i;
    i = 0;
    if (!ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) {
      break;
    }
  }
  break_findNonLiteralCharacter: ;
  NSString *result;
  if (builder == nil) {
    result = [NSString stringWithCharacters:self->buffer_ offset:self->pos_ length:i];
  }
  else {
    
#line 1094
    (void) [builder appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    result = [builder description];
  }
  self->pos_ += i;
  return result;
}


#line 1101
void ComGoogleGsonStreamJsonReader_skipQuotedValueWithChar_(ComGoogleGsonStreamJsonReader *self, jchar quote) {
  
#line 1103
  IOSCharArray *buffer = self->buffer_;
  do {
    jint p = self->pos_;
    jint l = self->limit_;
    
#line 1108
    while (p < l) {
      jint c = IOSCharArray_Get(nil_chk(buffer), p++);
      if (c == quote) {
        self->pos_ = p;
        return;
      }
      else
#line 1113
      if (c == '\\') {
        self->pos_ = p;
        ComGoogleGsonStreamJsonReader_readEscapeCharacter(self);
        p = self->pos_;
        l = self->limit_;
      }
      else
#line 1118
      if (c == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = p;
      }
    }
    self->pos_ = p;
  }
  while (ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self,
#line 1124
  1));
  @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated string");
}


#line 1128
void ComGoogleGsonStreamJsonReader_skipUnquotedValue(ComGoogleGsonStreamJsonReader *self) {
  do {
    jint i = 0;
    for (; self->pos_ + i < self->limit_; i++) {
      switch (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i)) {
        case '/':
        case '\\':
        case ';':
        case '#':
        case '=':
        ComGoogleGsonStreamJsonReader_checkLenient(self);
        case '{':
        case '}':
        case '[':
        case ']':
        case ':':
        case ',':
        case ' ':
        case 0x0009:
        case 0x000c:
        case 0x000d:
        case 0x000a:
        self->pos_ += i;
        return;
      }
    }
    self->pos_ += i;
  }
  while (ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self,
#line 1155
  1));
}


#line 1268
void ComGoogleGsonStreamJsonReader_pushWithInt_(ComGoogleGsonStreamJsonReader *self, jint newTop) {
  if (self->stackSize_ == ((IOSIntArray *) nil_chk(self->stack_))->size_) {
    IOSIntArray *newStack = [IOSIntArray newArrayWithLength:self->stackSize_ * 2];
    IOSIntArray *newPathIndices = [IOSIntArray newArrayWithLength:self->stackSize_ * 2];
    IOSObjectArray *newPathNames = [IOSObjectArray newArrayWithLength:self->stackSize_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, newStack, 0, self->stackSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathIndices_, 0, newPathIndices, 0, self->stackSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathNames_, 0, newPathNames, 0, self->stackSize_);
    self->stack_ = newStack;
    self->pathIndices_ = newPathIndices;
    self->pathNames_ = newPathNames;
  }
  *IOSIntArray_GetRef(self->stack_, self->stackSize_++) = newTop;
}


#line 1288
jboolean ComGoogleGsonStreamJsonReader_fillBufferWithInt_(ComGoogleGsonStreamJsonReader *self, jint minimum) {
  IOSCharArray *buffer = self->buffer_;
  self->lineStart_ -= self->pos_;
  if (self->limit_ != self->pos_) {
    self->limit_ -= self->pos_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, self->pos_, buffer, 0, self->limit_);
  }
  else {
    
#line 1295
    self->limit_ = 0;
  }
  
#line 1298
  self->pos_ = 0;
  jint total;
  while ((total = [((JavaIoReader *) nil_chk(self->in_)) readWithCharArray:buffer withInt:self->limit_ withInt:((IOSCharArray *) nil_chk(buffer))->size_ - self->limit_]) != -1) {
    self->limit_ += total;
    
#line 1304
    if (self->lineNumber_ == 0 && self->lineStart_ == 0 && self->limit_ > 0 && IOSCharArray_Get(buffer, 0) == 0xfeff) {
      self->pos_++;
      self->lineStart_++;
      minimum++;
    }
    
#line 1310
    if (self->limit_ >= minimum) {
      return YES;
    }
  }
  return NO;
}


#line 1317
jint ComGoogleGsonStreamJsonReader_getLineNumber(ComGoogleGsonStreamJsonReader *self) {
  return self->lineNumber_ + 1;
}

jint ComGoogleGsonStreamJsonReader_getColumnNumber(ComGoogleGsonStreamJsonReader *self) {
  return self->pos_ - self->lineStart_ + 1;
}


#line 1331
jint ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(ComGoogleGsonStreamJsonReader *self, jboolean throwOnEof) {
  
#line 1340
  IOSCharArray *buffer = self->buffer_;
  jint p = self->pos_;
  jint l = self->limit_;
  while (YES) {
    if (p == l) {
      self->pos_ = p;
      if (!ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) {
        break;
      }
      p = self->pos_;
      l = self->limit_;
    }
    
#line 1353
    jint c = IOSCharArray_Get(nil_chk(buffer), p++);
    if (c == 0x000a) {
      self->lineNumber_++;
      self->lineStart_ = p;
      continue;
    }
    else
#line 1358
    if (c == ' ' || c == 0x000d || c == 0x0009) {
      continue;
    }
    
#line 1362
    if (c == '/') {
      self->pos_ = p;
      if (p == l) {
        self->pos_--;
        jboolean charsLoaded = ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 2);
        self->pos_++;
        if (!charsLoaded) {
          return c;
        }
      }
      
#line 1373
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      jchar peek = IOSCharArray_Get(buffer, self->pos_);
      switch (peek) {
        case '*':
        
#line 1378
        self->pos_++;
        if (!ComGoogleGsonStreamJsonReader_skipToWithNSString_(self, @"*/")) {
          @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated comment");
        }
        p = self->pos_ + 2;
        l = self->limit_;
        continue;
        
#line 1386
        case '/':
        
#line 1388
        self->pos_++;
        ComGoogleGsonStreamJsonReader_skipToEndOfLine(self);
        p = self->pos_;
        l = self->limit_;
        continue;
        
#line 1394
        default:
        return c;
      }
    }
    else
#line 1397
    if (c == '#') {
      self->pos_ = p;
      
#line 1404
      ComGoogleGsonStreamJsonReader_checkLenient(self);
      ComGoogleGsonStreamJsonReader_skipToEndOfLine(self);
      p = self->pos_;
      l = self->limit_;
    }
    else {
      
#line 1409
      self->pos_ = p;
      return c;
    }
  }
  if (throwOnEof) {
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"End of input at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self)));
  }
  else {
    return -1;
  }
}


#line 1421
void ComGoogleGsonStreamJsonReader_checkLenient(ComGoogleGsonStreamJsonReader *self) {
  if (!self->lenient_) {
    @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Use JsonReader.setLenient(true) to accept malformed JSON");
  }
}


#line 1432
void ComGoogleGsonStreamJsonReader_skipToEndOfLine(ComGoogleGsonStreamJsonReader *self) {
  while (self->pos_ < self->limit_ || ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) {
    jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
    if (c == 0x000a) {
      self->lineNumber_++;
      self->lineStart_ = self->pos_;
      break;
    }
    else
#line 1439
    if (c == 0x000d) {
      break;
    }
  }
}

jboolean ComGoogleGsonStreamJsonReader_skipToWithNSString_(ComGoogleGsonStreamJsonReader *self, NSString *toFind) {
  
#line 1450
  for (; self->pos_ + ((jint) [((NSString *) nil_chk(toFind)) length]) <= self->limit_ || ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, ((jint) [toFind length])); self->pos_++) {
    {
      
#line 1451
      if (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_) == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = self->pos_ + 1;
        continue;
      }
      for (jint c = 0; c < ((jint) [toFind length]); c++) {
        if (IOSCharArray_Get(self->buffer_, self->pos_ + c) != [toFind charAtWithInt:c]) {
          goto continue_outer;
        }
      }
      return YES;
    }
    continue_outer: ;
  }
  
#line 1463
  return NO;
}


#line 1511
jchar ComGoogleGsonStreamJsonReader_readEscapeCharacter(ComGoogleGsonStreamJsonReader *self) {
  if (self->pos_ == self->limit_ && !ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 1)) {
    @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence");
  }
  
#line 1516
  jchar escaped = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
  {
    
#line 1523
    jchar result;
    
#line 1517
    switch (escaped) {
      case 'u':
      if (self->pos_ + 4 > self->limit_ && !ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, 4)) {
        @throw ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence");
      }
      
#line 1523
      result = 0;
      for (jint i = self->pos_, end = i + 4; i < end; i++) {
        jchar c = IOSCharArray_Get(self->buffer_, i);
        LShiftAssignChar(&result, 4);
        if (c >= '0' && c <= '9') {
          result += (c - '0');
        }
        else
#line 1529
        if (c >= 'a' && c <= 'f') {
          result += (c - 'a' + 10);
        }
        else
#line 1531
        if (c >= 'A' && c <= 'F') {
          result += (c - 'A' + 10);
        }
        else {
          
#line 1534
          @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", @"\\u", [NSString stringWithCharacters:self->buffer_ offset:self->pos_ length:4]));
        }
      }
      self->pos_ += 4;
      return result;
      
#line 1540
      case 't':
      return 0x0009;
      
#line 1543
      case 'b':
      return 0x0008;
      
#line 1546
      case 'n':
      return 0x000a;
      
#line 1549
      case 'r':
      return 0x000d;
      
#line 1552
      case 'f':
      return 0x000c;
      
#line 1555
      case 0x000a:
      self->lineNumber_++;
      self->lineStart_ = self->pos_;
      
#line 1560
      case '\'':
      case '"':
      case '\\':
      default:
      return escaped;
    }
  }
}


#line 1572
JavaIoIOException *ComGoogleGsonStreamJsonReader_syntaxErrorWithNSString_(ComGoogleGsonStreamJsonReader *self, NSString *message) {
  @throw new_ComGoogleGsonStreamMalformedJsonException_initWithNSString_(JreStrcat("$$I$I$$", message, @" at line ", ComGoogleGsonStreamJsonReader_getLineNumber(self), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(self), @" path ",
#line 1574
  [self getPath]));
}


#line 1580
void ComGoogleGsonStreamJsonReader_consumeNonExecutePrefix(ComGoogleGsonStreamJsonReader *self) {
  
#line 1582
  ComGoogleGsonStreamJsonReader_nextNonWhitespaceWithBoolean_(self, YES);
  self->pos_--;
  
#line 1585
  if (self->pos_ + ((IOSCharArray *) nil_chk(ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_))->size_ > self->limit_ && !ComGoogleGsonStreamJsonReader_fillBufferWithInt_(self, ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_->size_)) {
    return;
  }
  
#line 1589
  for (jint i = 0; i < ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_->size_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i) != IOSCharArray_Get(ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_, i)) {
      return;
    }
  }
  
#line 1596
  self->pos_ += ComGoogleGsonStreamJsonReader_NON_EXECUTE_PREFIX_->size_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonStreamJsonReader)

@implementation ComGoogleGsonStreamJsonReader_$1


#line 1601
- (void)promoteNameToValueWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)reader {
  if ([reader isKindOfClass:[ComGoogleGsonInternalBindJsonTreeReader class]]) {
    [((ComGoogleGsonInternalBindJsonTreeReader *) nil_chk(((ComGoogleGsonInternalBindJsonTreeReader *) check_class_cast(reader, [ComGoogleGsonInternalBindJsonTreeReader class])))) promoteNameToValue];
    return;
  }
  jint p = ((ComGoogleGsonStreamJsonReader *) nil_chk(reader))->peeked_;
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_NONE) {
    p = ComGoogleGsonStreamJsonReader_doPeek(reader);
  }
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
    reader->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_DOUBLE_QUOTED;
  }
  else
#line 1612
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
    reader->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_SINGLE_QUOTED;
  }
  else
#line 1614
  if (p == ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED_NAME) {
    reader->peeked_ = ComGoogleGsonStreamJsonReader_PEEKED_UNQUOTED;
  }
  else {
    
#line 1617
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a name but was ", [reader peek], @"  at line ", ComGoogleGsonStreamJsonReader_getLineNumber(
#line 1618
    reader), @" column ", ComGoogleGsonStreamJsonReader_getColumnNumber(reader), @" path ",
#line 1619
    [reader getPath]));
  }
}

- (instancetype)init {
  ComGoogleGsonStreamJsonReader_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "promoteNameToValueWithComGoogleGsonStreamJsonReader:", "promoteNameToValue", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComGoogleGsonStreamJsonReader_$1 = { 2, "", "com.google.gson.stream", "JsonReader", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonStreamJsonReader_$1;
}

@end

void ComGoogleGsonStreamJsonReader_$1_init(ComGoogleGsonStreamJsonReader_$1 *self) {
  (void) ComGoogleGsonInternalJsonReaderInternalAccess_init(self);
}

ComGoogleGsonStreamJsonReader_$1 *new_ComGoogleGsonStreamJsonReader_$1_init() {
  ComGoogleGsonStreamJsonReader_$1 *self = [ComGoogleGsonStreamJsonReader_$1 alloc];
  ComGoogleGsonStreamJsonReader_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonStreamJsonReader_$1)
