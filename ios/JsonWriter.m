//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/stream/JsonWriter.java
//


#line 1 "jar:file:libs/gson-2.3.1-sources.jar!com/google/gson/stream/JsonWriter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JsonScope.h"
#include "JsonWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"

@interface ComGoogleGsonStreamJsonWriter () {
 @public
  /**
   @brief The output data, containing at most one top-level array or object.
   */
  JavaIoWriter *out_;
  IOSIntArray *stack_;
  jint stackSize_;
  /**
   @brief A string containing a full set of spaces for a single level of indentation, or null for no pretty printing.
   */
  NSString *indent_;
  /**
   @brief The name/value separator; either ":" or ": ".
   */
  NSString *separator_;
  jboolean lenient_;
  jboolean htmlSafe_;
  NSString *deferredName_;
  jboolean serializeNulls_;
}

/**
 @brief Enters a new scope by appending any necessary whitespace and the given bracket.
 */
- (ComGoogleGsonStreamJsonWriter *)openWithInt:(jint)empty
                                  withNSString:(NSString *)openBracket;

/**
 @brief Closes the current scope by appending any necessary whitespace and the given bracket.
 */
- (ComGoogleGsonStreamJsonWriter *)closeWithInt:(jint)empty
                                        withInt:(jint)nonempty
                                   withNSString:(NSString *)closeBracket;

- (void)pushWithInt:(jint)newTop;

/**
 @brief Returns the value on the top of the stack.
 */
- (jint)peek;

/**
 @brief Replace the value on the top of the stack with the given value.
 */
- (void)replaceTopWithInt:(jint)topOfStack;

- (void)writeDeferredName;

- (void)stringWithNSString:(NSString *)value;

- (void)newline OBJC_METHOD_FAMILY_NONE;

/**
 @brief Inserts any necessary separators and whitespace before a name.
 Also adjusts the stack to expect the name's value.
 */
- (void)beforeName;

/**
 @brief Inserts any necessary separators and whitespace before a literal value, inline array, or inline object.
 Also adjusts the stack to expect either a closing bracket or another element.
 @param root true if the value is a new array or object, the two values permitted as top-level elements.
 */
- (void)beforeValueWithBoolean:(jboolean)root;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonWriter, out_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonWriter, stack_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonWriter, indent_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonWriter, separator_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleGsonStreamJsonWriter, deferredName_, NSString *)

static IOSObjectArray *ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonWriter, REPLACEMENT_CHARS_, IOSObjectArray *)

static IOSObjectArray *ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGsonStreamJsonWriter, HTML_SAFE_REPLACEMENT_CHARS_, IOSObjectArray *)

__attribute__((unused)) static ComGoogleGsonStreamJsonWriter *ComGoogleGsonStreamJsonWriter_openWithInt_withNSString_(ComGoogleGsonStreamJsonWriter *self, jint empty, NSString *openBracket);

__attribute__((unused)) static ComGoogleGsonStreamJsonWriter *ComGoogleGsonStreamJsonWriter_closeWithInt_withInt_withNSString_(ComGoogleGsonStreamJsonWriter *self, jint empty, jint nonempty, NSString *closeBracket);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_pushWithInt_(ComGoogleGsonStreamJsonWriter *self, jint newTop);

__attribute__((unused)) static jint ComGoogleGsonStreamJsonWriter_peek(ComGoogleGsonStreamJsonWriter *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(ComGoogleGsonStreamJsonWriter *self, jint topOfStack);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_writeDeferredName(ComGoogleGsonStreamJsonWriter *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_stringWithNSString_(ComGoogleGsonStreamJsonWriter *self, NSString *value);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_newline(ComGoogleGsonStreamJsonWriter *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_beforeName(ComGoogleGsonStreamJsonWriter *self);

__attribute__((unused)) static void ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(ComGoogleGsonStreamJsonWriter *self, jboolean root);

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonStreamJsonWriter)


#line 130
@implementation ComGoogleGsonStreamJsonWriter


#line 197
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)outArg {
  ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(self, outArg);
  return self;
}


#line 212
- (void)setIndentWithNSString:(NSString *)indent {
  if (((jint) [((NSString *) nil_chk(indent)) length]) == 0) {
    self->indent_ = nil;
    self->separator_ = @":";
  }
  else {
    
#line 217
    self->indent_ = indent;
    self->separator_ = @": ";
  }
}


#line 234
- (void)setLenientWithBoolean:(jboolean)lenient {
  self->lenient_ = lenient;
}


#line 241
- (jboolean)isLenient {
  return lenient_;
}


#line 252
- (void)setHtmlSafeWithBoolean:(jboolean)htmlSafe {
  self->htmlSafe_ = htmlSafe;
}


#line 260
- (jboolean)isHtmlSafe {
  return htmlSafe_;
}


#line 268
- (void)setSerializeNullsWithBoolean:(jboolean)serializeNulls {
  self->serializeNulls_ = serializeNulls;
}


#line 276
- (jboolean)getSerializeNulls {
  return serializeNulls_;
}


#line 286
- (ComGoogleGsonStreamJsonWriter *)beginArray {
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  return ComGoogleGsonStreamJsonWriter_openWithInt_withNSString_(self, ComGoogleGsonStreamJsonScope_EMPTY_ARRAY, @"[");
}


#line 296
- (ComGoogleGsonStreamJsonWriter *)endArray {
  return ComGoogleGsonStreamJsonWriter_closeWithInt_withInt_withNSString_(self, ComGoogleGsonStreamJsonScope_EMPTY_ARRAY, ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY, @"]");
}


#line 306
- (ComGoogleGsonStreamJsonWriter *)beginObject {
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  return ComGoogleGsonStreamJsonWriter_openWithInt_withNSString_(self, ComGoogleGsonStreamJsonScope_EMPTY_OBJECT, @"{");
}


#line 316
- (ComGoogleGsonStreamJsonWriter *)endObject {
  return ComGoogleGsonStreamJsonWriter_closeWithInt_withInt_withNSString_(self, ComGoogleGsonStreamJsonScope_EMPTY_OBJECT, ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT, @"}");
}


#line 324
- (ComGoogleGsonStreamJsonWriter *)openWithInt:(jint)empty
                                  withNSString:(NSString *)openBracket {
  return ComGoogleGsonStreamJsonWriter_openWithInt_withNSString_(self, empty, openBracket);
}


#line 335
- (ComGoogleGsonStreamJsonWriter *)closeWithInt:(jint)empty
                                        withInt:(jint)nonempty
                                   withNSString:(NSString *)closeBracket {
  return ComGoogleGsonStreamJsonWriter_closeWithInt_withInt_withNSString_(self, empty, nonempty, closeBracket);
}


#line 353
- (void)pushWithInt:(jint)newTop {
  ComGoogleGsonStreamJsonWriter_pushWithInt_(self, newTop);
}


#line 365
- (jint)peek {
  return ComGoogleGsonStreamJsonWriter_peek(self);
}


#line 375
- (void)replaceTopWithInt:(jint)topOfStack {
  ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(self, topOfStack);
}


#line 385
- (ComGoogleGsonStreamJsonWriter *)nameWithNSString:(NSString *)name {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name == null");
  }
  if (deferredName_ != nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (stackSize_ == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonWriter is closed.");
  }
  deferredName_ = name;
  return self;
}

- (void)writeDeferredName {
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
}


#line 413
- (ComGoogleGsonStreamJsonWriter *)valueWithNSString:(NSString *)value {
  if (value == nil) {
    return [self nullValue];
  }
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  ComGoogleGsonStreamJsonWriter_stringWithNSString_(self, value);
  return self;
}


#line 428
- (ComGoogleGsonStreamJsonWriter *)nullValue {
  if (deferredName_ != nil) {
    if (serializeNulls_) {
      ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
    }
    else {
      
#line 433
      deferredName_ = nil;
      return self;
    }
  }
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:@"null"];
  return self;
}


#line 447
- (ComGoogleGsonStreamJsonWriter *)valueWithBoolean:(jboolean)value {
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:value ? @"true" : @"false"];
  return self;
}


#line 461
- (ComGoogleGsonStreamJsonWriter *)valueWithDouble:(jdouble)value {
  if (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"Numeric values must be finite, but was ", value));
  }
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  (void) [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:JavaLangDouble_toStringWithDouble_(value)];
  return self;
}


#line 476
- (ComGoogleGsonStreamJsonWriter *)valueWithLong:(jlong)value {
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:JavaLangLong_toStringWithLong_(value)];
  return self;
}


#line 490
- (ComGoogleGsonStreamJsonWriter *)valueWithNSNumber:(NSNumber *)value {
  if (value == nil) {
    return [self nullValue];
  }
  
#line 495
  ComGoogleGsonStreamJsonWriter_writeDeferredName(self);
  NSString *string = [((NSNumber *) nil_chk(value)) description];
  if (!lenient_ &&
#line 498
  ([((NSString *) nil_chk(string)) isEqual:@"-Infinity"] || [string isEqual:@"Infinity"] || [string isEqual:@"NaN"])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Numeric values must be finite, but was ", value));
  }
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, NO);
  (void) [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:string];
  return self;
}


#line 510
- (void)flush {
  if (stackSize_ == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonWriter is closed.");
  }
  [((JavaIoWriter *) nil_chk(out_)) flush];
}


#line 522
- (void)close {
  [((JavaIoWriter *) nil_chk(out_)) close];
  
#line 525
  jint size = stackSize_;
  if (size > 1 || (size == 1 && IOSIntArray_Get(nil_chk(stack_), size - 1) != ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT)) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incomplete document");
  }
  stackSize_ = 0;
}


#line 532
- (void)stringWithNSString:(NSString *)value {
  ComGoogleGsonStreamJsonWriter_stringWithNSString_(self, value);
}


#line 564
- (void)newline {
  ComGoogleGsonStreamJsonWriter_newline(self);
}


#line 579
- (void)beforeName {
  ComGoogleGsonStreamJsonWriter_beforeName(self);
}


#line 599
- (void)beforeValueWithBoolean:(jboolean)root {
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, root);
}

+ (void)initialize {
  if (self == [ComGoogleGsonStreamJsonWriter class]) {
    {
      
#line 145
      ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_ = [IOSObjectArray newArrayWithLength:128 type:NSString_class_()];
      for (jint i = 0; i <= (jint) 0x1f; i++) {
        (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, i, NSString_formatWithNSString_withNSObjectArray_(@"\\u%04x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((jint) i) } count:1 type:NSObject_class_()]));
      }
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, '"', @"\\\"");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, '\\', @"\\\\");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, 0x0009, @"\\t");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, 0x0008, @"\\b");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, 0x000a, @"\\n");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, 0x000d, @"\\r");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, 0x000c, @"\\f");
      ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_ = [ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_ clone];
      (void) IOSObjectArray_Set(nil_chk(ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_), '<', @"\\u003c");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_, '>', @"\\u003e");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_, '&', @"\\u0026");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_, '=', @"\\u003d");
      (void) IOSObjectArray_Set(ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_, '\'', @"\\u0027");
    }
    J2OBJC_SET_INITIALIZED(ComGoogleGsonStreamJsonWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "JsonWriter", NULL, 0x1, NULL, NULL },
    { "setIndentWithNSString:", "setIndent", "V", 0x11, NULL, NULL },
    { "setLenientWithBoolean:", "setLenient", "V", 0x11, NULL, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL, NULL },
    { "setHtmlSafeWithBoolean:", "setHtmlSafe", "V", 0x11, NULL, NULL },
    { "isHtmlSafe", NULL, "Z", 0x11, NULL, NULL },
    { "setSerializeNullsWithBoolean:", "setSerializeNulls", "V", 0x11, NULL, NULL },
    { "getSerializeNulls", NULL, "Z", 0x11, NULL, NULL },
    { "beginArray", NULL, "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "endArray", NULL, "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "beginObject", NULL, "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "endObject", NULL, "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "openWithInt:withNSString:", "open", "Lcom.google.gson.stream.JsonWriter;", 0x2, "Ljava.io.IOException;", NULL },
    { "closeWithInt:withInt:withNSString:", "close", "Lcom.google.gson.stream.JsonWriter;", 0x2, "Ljava.io.IOException;", NULL },
    { "pushWithInt:", "push", "V", 0x2, NULL, NULL },
    { "peek", NULL, "I", 0x2, NULL, NULL },
    { "replaceTopWithInt:", "replaceTop", "V", 0x2, NULL, NULL },
    { "nameWithNSString:", "name", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeDeferredName", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "valueWithNSString:", "value", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "nullValue", NULL, "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "valueWithBoolean:", "value", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "valueWithDouble:", "value", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "valueWithLong:", "value", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "valueWithNSNumber:", "value", "Lcom.google.gson.stream.JsonWriter;", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "stringWithNSString:", "string", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "newline", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "beforeName", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "beforeValueWithBoolean:", "beforeValue", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "REPLACEMENT_CHARS_", NULL, 0x1a, "[Ljava.lang.String;", &ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_, NULL,  },
    { "HTML_SAFE_REPLACEMENT_CHARS_", NULL, 0x1a, "[Ljava.lang.String;", &ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_, NULL,  },
    { "out_", NULL, 0x12, "Ljava.io.Writer;", NULL, NULL,  },
    { "stack_", NULL, 0x2, "[I", NULL, NULL,  },
    { "stackSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "indent_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "separator_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "lenient_", NULL, 0x2, "Z", NULL, NULL,  },
    { "htmlSafe_", NULL, 0x2, "Z", NULL, NULL,  },
    { "deferredName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "serializeNulls_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComGoogleGsonStreamJsonWriter = { 2, "JsonWriter", "com.google.gson.stream", NULL, 0x1, 31, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonStreamJsonWriter;
}

@end


#line 197
void ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(ComGoogleGsonStreamJsonWriter *self, JavaIoWriter *outArg) {
  (void) NSObject_init(self);
  self->stack_ = [IOSIntArray newArrayWithLength:
#line 167
  32];
  self->stackSize_ = 0;
  {
    ComGoogleGsonStreamJsonWriter_pushWithInt_(self, ComGoogleGsonStreamJsonScope_EMPTY_DOCUMENT);
  }
  self->separator_ =
#line 182
  @":";
  self->serializeNulls_ =
#line 190
  YES;
  
#line 198
  if (outArg == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"out == null");
  }
  self->out_ = outArg;
}


#line 197
ComGoogleGsonStreamJsonWriter *new_ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(JavaIoWriter *outArg) {
  ComGoogleGsonStreamJsonWriter *self = [ComGoogleGsonStreamJsonWriter alloc];
  ComGoogleGsonStreamJsonWriter_initWithJavaIoWriter_(self, outArg);
  return self;
}


#line 324
ComGoogleGsonStreamJsonWriter *ComGoogleGsonStreamJsonWriter_openWithInt_withNSString_(ComGoogleGsonStreamJsonWriter *self, jint empty, NSString *openBracket) {
  ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(self, YES);
  ComGoogleGsonStreamJsonWriter_pushWithInt_(self, empty);
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:openBracket];
  return self;
}


#line 335
ComGoogleGsonStreamJsonWriter *ComGoogleGsonStreamJsonWriter_closeWithInt_withInt_withNSString_(ComGoogleGsonStreamJsonWriter *self, jint empty, jint nonempty, NSString *closeBracket) {
  
#line 337
  jint context = ComGoogleGsonStreamJsonWriter_peek(self);
  if (context != nonempty && context != empty) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Nesting problem.");
  }
  if (self->deferredName_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Dangling name: ", self->deferredName_));
  }
  
#line 345
  self->stackSize_--;
  if (context == nonempty) {
    ComGoogleGsonStreamJsonWriter_newline(self);
  }
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:closeBracket];
  return self;
}


#line 353
void ComGoogleGsonStreamJsonWriter_pushWithInt_(ComGoogleGsonStreamJsonWriter *self, jint newTop) {
  if (self->stackSize_ == ((IOSIntArray *) nil_chk(self->stack_))->size_) {
    IOSIntArray *newStack = [IOSIntArray newArrayWithLength:self->stackSize_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, newStack, 0, self->stackSize_);
    self->stack_ = newStack;
  }
  *IOSIntArray_GetRef(self->stack_, self->stackSize_++) = newTop;
}


#line 365
jint ComGoogleGsonStreamJsonWriter_peek(ComGoogleGsonStreamJsonWriter *self) {
  if (self->stackSize_ == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonWriter is closed.");
  }
  return IOSIntArray_Get(nil_chk(self->stack_), self->stackSize_ - 1);
}


#line 375
void ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(ComGoogleGsonStreamJsonWriter *self, jint topOfStack) {
  *IOSIntArray_GetRef(nil_chk(self->stack_), self->stackSize_ - 1) = topOfStack;
}


#line 399
void ComGoogleGsonStreamJsonWriter_writeDeferredName(ComGoogleGsonStreamJsonWriter *self) {
  if (self->deferredName_ != nil) {
    ComGoogleGsonStreamJsonWriter_beforeName(self);
    ComGoogleGsonStreamJsonWriter_stringWithNSString_(self, self->deferredName_);
    self->deferredName_ = nil;
  }
}


#line 532
void ComGoogleGsonStreamJsonWriter_stringWithNSString_(ComGoogleGsonStreamJsonWriter *self, NSString *value) {
  IOSObjectArray *replacements = self->htmlSafe_ ? ComGoogleGsonStreamJsonWriter_HTML_SAFE_REPLACEMENT_CHARS_ : ComGoogleGsonStreamJsonWriter_REPLACEMENT_CHARS_;
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:@"\""];
  jint last = 0;
  jint length = ((jint) [((NSString *) nil_chk(value)) length]);
  for (jint i = 0; i < length; i++) {
    jchar c = [value charAtWithInt:i];
    NSString *replacement;
    if (c < 128) {
      replacement = IOSObjectArray_Get(replacements, c);
      if (replacement == nil) {
        continue;
      }
    }
    else
#line 545
    if (c == 0x2028) {
      replacement = @"\\u2028";
    }
    else
#line 547
    if (c == 0x2029) {
      replacement = @"\\u2029";
    }
    else {
      
#line 550
      continue;
    }
    if (last < i) {
      [self->out_ writeWithNSString:value withInt:last withInt:i - last];
    }
    [self->out_ writeWithNSString:replacement];
    last = i + 1;
  }
  if (last < length) {
    [self->out_ writeWithNSString:value withInt:last withInt:length - last];
  }
  [self->out_ writeWithNSString:@"\""];
}


#line 564
void ComGoogleGsonStreamJsonWriter_newline(ComGoogleGsonStreamJsonWriter *self) {
  if (self->indent_ == nil) {
    return;
  }
  
#line 569
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:@"\n"];
  for (jint i = 1, size = self->stackSize_; i < size; i++) {
    [self->out_ writeWithNSString:self->indent_];
  }
}


#line 579
void ComGoogleGsonStreamJsonWriter_beforeName(ComGoogleGsonStreamJsonWriter *self) {
  jint context = ComGoogleGsonStreamJsonWriter_peek(self);
  if (context == ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT) {
    [((JavaIoWriter *) nil_chk(self->out_)) writeWithInt:','];
  }
  else
#line 583
  if (context != ComGoogleGsonStreamJsonScope_EMPTY_OBJECT) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Nesting problem.");
  }
  ComGoogleGsonStreamJsonWriter_newline(self);
  ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(self, ComGoogleGsonStreamJsonScope_DANGLING_NAME);
}


#line 599
void ComGoogleGsonStreamJsonWriter_beforeValueWithBoolean_(ComGoogleGsonStreamJsonWriter *self, jboolean root) {
  switch (ComGoogleGsonStreamJsonWriter_peek(self)) {
    case ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT:
    if (!self->lenient_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 604
      @"JSON must have only one top-level value.");
    }
    
#line 607
    case ComGoogleGsonStreamJsonScope_EMPTY_DOCUMENT:
    if (!self->lenient_ && !root) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 610
      @"JSON must start with an array or an object.");
    }
    ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(self, ComGoogleGsonStreamJsonScope_NONEMPTY_DOCUMENT);
    break;
    
#line 615
    case ComGoogleGsonStreamJsonScope_EMPTY_ARRAY:
    ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(self, ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY);
    ComGoogleGsonStreamJsonWriter_newline(self);
    break;
    
#line 620
    case ComGoogleGsonStreamJsonScope_NONEMPTY_ARRAY:
    (void) [((JavaIoWriter *) nil_chk(self->out_)) appendWithChar:','];
    ComGoogleGsonStreamJsonWriter_newline(self);
    break;
    
#line 625
    case ComGoogleGsonStreamJsonScope_DANGLING_NAME:
    (void) [((JavaIoWriter *) nil_chk(self->out_)) appendWithJavaLangCharSequence:self->separator_];
    ComGoogleGsonStreamJsonWriter_replaceTopWithInt_(self, ComGoogleGsonStreamJsonScope_NONEMPTY_OBJECT);
    break;
    
#line 630
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Nesting problem.");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonStreamJsonWriter)
